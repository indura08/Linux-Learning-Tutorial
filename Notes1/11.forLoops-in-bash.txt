1. Basic for Loop Syntax

The simplest form of a for loop iterates over a list of items:


for item in item1 item2 item3; do
    echo $item
done

example :

for color in red green blue; do
    echo "Color: $color"
done


2. for Loop with Numbers (Using seq)

You can use seq to generate a range of numbers for a for loop.

for i in $(seq 1 5); do
    echo $i
done


3. for Loop with C-Style Syntax

Bash also allows C-style syntax for for loops, especially when you need to control the increment value.

for ((i=1; i<=5; i++)); do
    echo "Iteration $i"
done



4. for Loop with Arrays

Bash arrays are easy to work with in for loops.

fruits=("apple" "banana" "cherry")

for fruit in "${fruits[@]}"; do
    echo "Fruit: $fruit"
done


5. for Loop to Process Files

A for loop can be used to iterate over files in a directory:

for file in /path/to/directory/*; do
    echo "Processing $file"
done

explanation:

2. do echo -n ${item} | wc -c;:

do: Starts the body of the for loop.

echo -n ${item}:

	echo prints text to the console.
	-n tells echo not to add a new line after the output. So echo -n ${item} just prints the item (like cat, dog, etc.) without adding a new line.

| (pipe): The | symbol takes the output from echo -n ${item} and sends it as input to the next command, wc -c.

3. wc -c:

wc (word count) is a command-line utility in Linux used to count lines, words, and bytes in text.

-c is an option for wc that tells it to count the number of bytes (characters) in the input.

So echo -n ${item} | wc -c will output the number of characters in each item (from MY_FRIST_LIST).